%Eli Bowen
%4/26/2018
%INPUTS:
%   h - OPTIONAL - handle to existing figure. If [], will create one
%   mat - 3D matrix (x by y by z)
%   xLabels - OPTIONAL x axis labels (any valid input to axis property XTickLabel)
%   yLabels - OPTIONAL y axis labels (any valid input to axis property YTickLabel)
%   zLabels - OPTIONAL z axis labels (any valid input to axis property ZTickLabel)
%   cmap - OPTIONAL (default=hot) either a string name for a valid matlab colormap (e.g. 'jet') or an Mx3 RGB color matrix, as is generated by functions like jet(M)
%RETURNS:
%   h - figure handle. If you passed one in, this is identical to the input.
function [h] = Plot3DHeatmap (h, mat, xLabels, yLabels, zLabels, cmap)
    assert(ndims(mat) == 3);
    if exist('xLabels', 'var') && ~isempty(xLabels)
        assert(numel(xLabels) == size(mat, 1));
    end
    if exist('yLabels', 'var') && ~isempty(yLabels)
        assert(numel(yLabels) == size(mat, 2));
    end
    if exist('zLabels', 'var') && ~isempty(zLabels)
        assert(numel(zLabels) == size(mat, 3));
    end
    if isempty(h)
        h = figure();
    end
    
    if ~exist('cmap', 'var') || isempty(cmap)
        myColors = hot(500);
    elseif ischar(cmap)
        fh = str2func(cmap);
        myColors = fh(500);
    else
        assert(size(cmap, 2) == 3);
        myColors = cmap;
    end
    
    [sphereX,sphereY,sphereZ] = sphere();
    r = 0.25;
    faceAlpha = 0.5;
    
    hold on;
    for i = 1:size(mat, 1)
        for j = 1:size(mat, 2)
            for k = 1:size(mat, 3)
                if ~isnan(mat(i,j,k))
                    surf(r*sphereX + i, r*sphereY + j, r*sphereZ + k, 'FaceColor', myColors(min(size(myColors, 1), 1 + floor(size(myColors, 1)*(mat(i,j,k)-min(mat(:), [], 'omitnan'))/(max(mat(:), [], 'omitnan')-min(mat(:), [], 'omitnan')))),:), 'EdgeColor', 'none', 'FaceAlpha', faceAlpha, 'FaceLighting', 'none'); % sphere with radius r centred at (ii,jj,kk)
                end
            end
        end
    end
    xlim([1-r,size(mat, 1)+r]);
    ylim([1-r,size(mat, 2)+r]);
    zlim([1-r,size(mat, 3)+r]);
    ax = gca();
    ax.XTick = 1:size(mat, 1);
    if exist('xLabels', 'var') && ~isempty(xLabels)
        ax.XTickLabel = xLabels;
    end
    ax.YTick = 1:size(mat, 2);
    if exist('yLabels', 'var') && ~isempty(yLabels)
        ax.YTickLabel = yLabels;
    end
    ax.ZTick = 1:size(mat, 3);
    if exist('zLabels', 'var') && ~isempty(zLabels)
        ax.ZTickLabel = zLabels;
    end
    grid on;
    
    xlabel('X'); ylabel('Y'); zlabel('Z'); %you may wish to call these functions again to give more useful axis labels
    
    view(45, 45);
    
    colormap(myColors);
    colorbar;
    if ~all(isnan(mat(:))) && min(mat(:), [], 'omitnan') ~= max(mat(:), [], 'omitnan')
        caxis([min(mat(:), [], 'omitnan'),max(mat(:), [], 'omitnan')]);
    end
end